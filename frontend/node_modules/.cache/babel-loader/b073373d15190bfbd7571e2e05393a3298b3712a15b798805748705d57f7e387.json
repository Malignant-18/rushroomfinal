{"ast":null,"code":"// import { useEffect, useState } from \"react\";\n// import L from \"leaflet\";\n// import { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n\n// import Sidebar from \"../components/Sidebar\";\n// import RecenterMap from \"../components/RecenterMap\";\n// import Filter from \"../components/Filter\";\n// import fetchRushroom from \"../backend/rushroom\";\n// import \"./Map.css\";\n\n// // Fix Leaflet marker icon issues\n// delete L.Icon.Default.prototype._getIconUrl;\n// L.Icon.Default.mergeOptions({\n//   iconRetinaUrl:\n//     \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n//   iconUrl:\n//     \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n//   shadowUrl:\n//     \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\",\n// });\n\n// export default function Map() {\n//   const [toilets, setToilets] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [selectedToilet, setSelectedToilet] = useState(null);\n//   const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n//   const [location, setLocation] = useState([9.965579, 76.24275]);\n//   const [userMarker, setUserMarker] = useState(null);\n\n//   useEffect(() => {\n//     async function fetchToilets() {\n//       try {\n//         const data = await fetchRushroom();\n//         setToilets(data);\n//       } catch (error) {\n//         console.error(\"Error fetching toilets:\", error.message);\n//         alert(\"There was an error fetching the toilets. Please try again.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//     fetchToilets();\n//   }, []);\n\n//   const handleViewDetails = (toilet) => {\n//     setSelectedToilet(toilet);\n//     setIsSidebarOpen(true);\n//   };\n\n//   const handleFetchLocation = () => {\n//     if (!navigator.geolocation) {\n//       alert(\"Geolocation is not supported by your browser.\");\n//       return;\n//     }\n\n//     navigator.geolocation.getCurrentPosition(\n//       (position) => {\n//         const currentLocation = [position.coords.latitude,position.coords.longitude,];\n//         setLocation(currentLocation);\n//         setUserMarker(currentLocation);\n//       },\n//       (error) => {\n//         console.error(\"Error fetching location:\", error.message);\n//         alert(\"Unable to fetch location. Please check your permissions.\");\n//       }\n//     );\n//   };\n\n//   if (loading) {\n//       return <div className=\"loading-container\">Loading...</div>;\n//   }\n\n//   return (\n//     <div className=\"map-page\">\n//       <div className=\"map-controls\">\n//         <button className=\"location-btn\" onClick={handleFetchLocation}>Get My Location</button>\n//       </div>\n\n//       <div className=\"map-container\">\n//         <MapContainer center={location} zoom={15} className=\"leaflet-map\">\n//           <TileLayer\n//             url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//             attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//           />\n//           {toilets.map((toilet) =>\n//             toilet.latitude && toilet.longitude ? (\n//               <Marker key={toilet.id} position={[toilet.latitude, toilet.longitude]}>\n//                 <Popup>\n//                   <div className=\"popup-content\">\n//                     <h3>{toilet.name}</h3>\n//                     <p>{toilet.place}</p>\n//                     <button onClick={() => handleViewDetails(toilet)}>View Details</button>\n//                   </div>\n//                 </Popup>\n//               </Marker>\n//             ) : null\n//           )}\n\n//           {userMarker && (\n//             <Marker position={userMarker}>\n//               <Popup>Your current location</Popup>\n//             </Marker>\n//           )}\n\n//           <RecenterMap location={location} />\n//         </MapContainer>\n//       </div>\n\n//       <Sidebar\n//         isOpen={isSidebarOpen}\n//         onClose={() => setIsSidebarOpen(false)}\n//         toilet={selectedToilet}\n//       />\n\n//       {isSidebarOpen && <div className=\"overlay\" onClick={() => setIsSidebarOpen(false)} />}\n//     </div>\n//   );\n// }\n\n// //<Filter />","map":{"version":3,"names":[],"sources":["/home/george-joseph/vscode/leaflet/frontend/src/pages/Map.jsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import L from \"leaflet\";\n// import { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n\n// import Sidebar from \"../components/Sidebar\";\n// import RecenterMap from \"../components/RecenterMap\";\n// import Filter from \"../components/Filter\";\n// import fetchRushroom from \"../backend/rushroom\";\n// import \"./Map.css\";\n\n// // Fix Leaflet marker icon issues\n// delete L.Icon.Default.prototype._getIconUrl;\n// L.Icon.Default.mergeOptions({\n//   iconRetinaUrl:\n//     \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n//   iconUrl:\n//     \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n//   shadowUrl:\n//     \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\",\n// });\n\n// export default function Map() {\n//   const [toilets, setToilets] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [selectedToilet, setSelectedToilet] = useState(null);\n//   const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n//   const [location, setLocation] = useState([9.965579, 76.24275]);\n//   const [userMarker, setUserMarker] = useState(null);\n\n//   useEffect(() => {\n//     async function fetchToilets() {\n//       try {\n//         const data = await fetchRushroom();\n//         setToilets(data);\n//       } catch (error) {\n//         console.error(\"Error fetching toilets:\", error.message);\n//         alert(\"There was an error fetching the toilets. Please try again.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//     fetchToilets();\n//   }, []);\n\n//   const handleViewDetails = (toilet) => {\n//     setSelectedToilet(toilet);\n//     setIsSidebarOpen(true);\n//   };\n\n//   const handleFetchLocation = () => {\n//     if (!navigator.geolocation) {\n//       alert(\"Geolocation is not supported by your browser.\");\n//       return;\n//     }\n\n//     navigator.geolocation.getCurrentPosition(\n//       (position) => {\n//         const currentLocation = [position.coords.latitude,position.coords.longitude,];\n//         setLocation(currentLocation);\n//         setUserMarker(currentLocation);\n//       },\n//       (error) => {\n//         console.error(\"Error fetching location:\", error.message);\n//         alert(\"Unable to fetch location. Please check your permissions.\");\n//       }\n//     );\n//   };\n\n//   if (loading) {\n//       return <div className=\"loading-container\">Loading...</div>;\n//   }\n\n//   return (\n//     <div className=\"map-page\">\n//       <div className=\"map-controls\">\n//         <button className=\"location-btn\" onClick={handleFetchLocation}>Get My Location</button>\n//       </div>\n\n//       <div className=\"map-container\">\n//         <MapContainer center={location} zoom={15} className=\"leaflet-map\">\n//           <TileLayer\n//             url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//             attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//           />\n//           {toilets.map((toilet) =>\n//             toilet.latitude && toilet.longitude ? (\n//               <Marker key={toilet.id} position={[toilet.latitude, toilet.longitude]}>\n//                 <Popup>\n//                   <div className=\"popup-content\">\n//                     <h3>{toilet.name}</h3>\n//                     <p>{toilet.place}</p>\n//                     <button onClick={() => handleViewDetails(toilet)}>View Details</button>\n//                   </div>\n//                 </Popup>\n//               </Marker>\n//             ) : null\n//           )}\n\n//           {userMarker && (\n//             <Marker position={userMarker}>\n//               <Popup>Your current location</Popup>\n//             </Marker>\n//           )}\n\n//           <RecenterMap location={location} />\n//         </MapContainer>\n//       </div>\n\n//       <Sidebar\n//         isOpen={isSidebarOpen}\n//         onClose={() => setIsSidebarOpen(false)}\n//         toilet={selectedToilet}\n//       />\n\n//       {isSidebarOpen && <div className=\"overlay\" onClick={() => setIsSidebarOpen(false)} />}\n//     </div>\n//   );\n// }\n\n// //<Filter />"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}